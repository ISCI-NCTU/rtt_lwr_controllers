&ACCESS RVO
&REL 47
&COMMENT ISIR-CNRS 2016
&PARAM start_pose = {a1 91.88,a2 112.87,a3 -102.22,a4 6.83,a5 55.73,a6 9.67,e1 -6.27}
&PARAM tool_number = 10
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM fri_rate_ms = 1.0
&PARAM base_number = 0
&PARAM EDITMASK = *
DEF fri_isir_control( )
;FOLD ProgramInfo
; Copyright ISIR-CNRS 2016
; Author: Antoine Hoarau
;ENDFOLD (ProgramInfo)
 
;FOLD Variables declaration
INT i
BOOL use_rel
DECL FRISTATE ret
REAL fri_rate_ms
INT  tool_number
;EXT  BAS (BAS_COMMAND  :IN,REAL  :IN )
;DECL INT SUCCESS
EXT  resetSTIFFNESS ( )
EXT do_stop2()
EXT set_vel()
DECL E6AXIS start_pose
DECL E6AXIS PTP_CMD
DECL E6POS LIN_CMD
;ENDFOLD DECL Variables
;FOLD INI
;FOLD BASISTECH INI
GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM()
INTERRUPT ON 3
BAS (#INITMOV,0 )
GLOBAL INTERRUPT DECL 4 WHEN $FRI_FRM_BOOL[8]==TRUE DO do_stop2()
INTERRUPT ON 4
GLOBAL INTERRUPT DECL 5 WHEN $FRI_FRM_BOOL[9]==TRUE DO set_vel()
INTERRUPT ON 5
;ENDFOLD (BASISTECH INI)
;FOLD USER INI
  ;FOLD Initialisation of shared array
  for i=1 to 16
    $fri_to_int[i]=0
    $fri_to_rea[i]=0.0
    $fri_to_bool[i]=false
  endfor
  ;ENDFOLD
;ENDFOLD (USER INI)
;ENDFOLD (INI)

; Script Parameters
tool_number = 5
fri_rate_ms = 1.0
start_pose = {a1 91.88,a2 112.87,a3 -102.22,a4 6.83,a5 55.73,a6 9.67,e1 -6.27}

;FOLD FRI Reset()
ret=fristop()
ret=friclose()

$fri_to_int[1] = 0
$fri_to_int[2] = 10
$fri_to_int[3] = tool_number

resetSTIFFNESS()

BAS(#TOOL,tool_number)
$STIFFNESS.TOOL = $TOOL
$STIFFNESS.BASE = $BASE
$STIFFNESS.COMMIT=TRUE
;ENDFOLD

;Goto Zero Position
PTP XHOME C_PTP
PTP start_pose C_PTP

repeat
  ret=friopen(fri_rate_ms)
  wait sec 0.5
until $FriState == #MON

PTP start_pose

repeat

  ;FOLD Wait for KRL_LOOP_REQUESTED
  for i=1 to 16
    if( (i <> 9) AND (i <> 8) ) then
      $fri_to_bool[i]=false
    endif
  endfor
  if($FriState==#CMD) then
    $fri_to_int[1] = 2
  endif
  if($FriState==#MON) then
    $fri_to_int[1] = 1
  endif
  wait for $fri_frm_bool[1]
  ;ENDFOLD

  ;FOLD New Control Mode requested
  if ( $fri_frm_bool[3] ) then

    $MSG_T.KEY[] = "New Control Mode Requested"
    $MSG_T.VALID = TRUE
    WAIT FOR ($MSG_T.VALID == FALSE)

    ; TODO : add a mode 40 Joint torque
    if ( ($fri_frm_int[2] == 10) OR ($fri_frm_int[2] == 20) OR ($fri_frm_int[2] == 30) ) then

      ret=fristop()
      wait for ($fristate==#MON)

      ;Set new Strategy
      $STIFFNESS.STRATEGY = $fri_frm_int[2]
      $STIFFNESS.COMMIT = TRUE

      ;FOLD Screen output
      IF ($stiffness.strategy == 10) THEN
        $MSG_T.KEY[] = "Joint Position Control Mode"
      ELSE
        IF ($stiffness.strategy == 20) THEN
          $MSG_T.KEY[] = "Cartesian Impedance Control Mode"
        ELSE
          IF (($stiffness.strategy == 30) AND (isZeroStiffness($STIFFNESS) == TRUE)) THEN
            $MSG_T.KEY[] = "Joint Torque Control Mode"
          ELSE
            if ($stiffness.strategy == 30) then
              $MSG_T.KEY[] = "Joint Impedance Control Mode"
            else
              $MSG_T.KEY[] = "ERROR: Wrong Control Strategy"
            endif
          ENDIF
        ENDIF
      ENDIF
      $MSG_T.VALID = TRUE
      WAIT FOR ($MSG_T.VALID == FALSE)
      ;ENDFOLD (Screen output)

      PTP CLAMP_AXES($AXIS_ACT)
      ret=fristart(1.0)
      wait sec 0.2

    endif
  endif
  ;ENDFOLD

  ;FOLD New tool requested
  if( $fri_frm_bool[4] ) then

    $MSG_T.KEY[] = "New Tool Requested"
    $MSG_T.VALID = TRUE
    WAIT FOR ($MSG_T.VALID == FALSE)

    if( $fri_frm_int[3] >= 0 ) then
      BAS(#TOOL,$fri_frm_int[3])
      $STIFFNESS.TOOL = $TOOL
      $STIFFNESS.BASE = $BASE
      $STIFFNESS.COMMIT=TRUE
    endif

  endif
  ;ENDFOLD

  ;FOLD New base requested
  if( $fri_frm_bool[5] ) then

    $MSG_T.KEY[] = "New Base Requested"
    $MSG_T.VALID = TRUE
    WAIT FOR ($MSG_T.VALID == FALSE)

    if( $fri_frm_int[4] >= 0 ) then
      BAS(#BASE,$fri_frm_int[4])
      $STIFFNESS.TOOL = $TOOL
      $STIFFNESS.BASE = $BASE
      $STIFFNESS.COMMIT=TRUE
    endif

  endif
  ;ENDFOLD

  ;FOLD Execute PTP Command
  if( $fri_frm_bool[6] ) then

    use_rel = ($fri_frm_int[6] <> 0)

    if( use_rel ) then
      $MSG_T.KEY[] = "New PTP_REL Command"
      $MSG_T.VALID = TRUE
      WAIT FOR ($MSG_T.VALID == FALSE)
    else
      $MSG_T.KEY[] = "New PTP Command"
      $MSG_T.VALID = TRUE
      WAIT FOR ($MSG_T.VALID == FALSE)
    endif

    if(use_rel) then
      PTP_CMD = {A1 0.0, A2 0.0, E1 0.0, A3 0.0, A4 0.0, A5 0.0, A6 0.0}
    else
      PTP_CMD = CLAMP_AXES($AXIS_ACT)
    endif

    if( $fri_frm_bool[10] ) then
      PTP_CMD.A1 = $fri_frm_rea[10]
    endif

    if( $fri_frm_bool[11] ) then
      PTP_CMD.A2 = $fri_frm_rea[11]
    endif

    if( $fri_frm_bool[12] ) then
      PTP_CMD.E1 = $fri_frm_rea[12]
    endif

    if( $fri_frm_bool[13] ) then
      PTP_CMD.A3 = $fri_frm_rea[13]
    endif

    if( $fri_frm_bool[14] ) then
      PTP_CMD.A4 = $fri_frm_rea[14]
    endif

    if( $fri_frm_bool[15] ) then
      PTP_CMD.A5 = $fri_frm_rea[15]
    endif

    if( $fri_frm_bool[16] ) then
      PTP_CMD.A6 = $fri_frm_rea[16]
    endif

    if(use_rel) then
      PTP_REL PTP_CMD
    else
      PTP CLAMP_AXES(PTP_CMD)
    endif

  endif
  ;ENDFOLD

  ;FOLD Execute LIN Command
  if( $fri_frm_bool[7] ) then

    use_rel = ($fri_frm_int[7] <> 0)

    if( use_rel ) then
      $MSG_T.KEY[] = "New LIN_REL Command"
      $MSG_T.VALID = TRUE
      WAIT FOR ($MSG_T.VALID == FALSE)
    else
      $MSG_T.KEY[] = "New LIN Command"
      $MSG_T.VALID = TRUE
      WAIT FOR ($MSG_T.VALID == FALSE)
    endif

    if(use_rel) then
      LIN_CMD = {x 0.0, y 0.0, z 0.0, a 0.0, b 0.0, c 0.0}
    endif

    if( $fri_frm_bool[10] OR use_rel) then
      LIN_CMD.X = $fri_frm_rea[1]
    endif

    if( $fri_frm_bool[11] OR use_rel ) then
      LIN_CMD.Y = $fri_frm_rea[2]
    endif

    if( $fri_frm_bool[12] OR use_rel ) then
      LIN_CMD.Z = $fri_frm_rea[3]
    endif

    if( $fri_frm_bool[13] OR use_rel ) then
      LIN_CMD.A = $fri_frm_rea[4]
    endif

    if( $fri_frm_bool[14] OR use_rel ) then
      LIN_CMD.B = $fri_frm_rea[5]
    endif

    if( $fri_frm_bool[15] OR use_rel ) then
      LIN_CMD.C = $fri_frm_rea[6]
    endif

    if( use_rel ) then
      LIN_REL LIN_CMD
    else
      LIN LIN_CMD
    endif

  endif
  ;ENDFOLD

  ; This wait is necessary otherwise it will execute
  ; the next set of instructions (!!)
  WAIT SEC 0.1

  for i=1 to 16
    if( (i <> 9) AND (i <> 8) ) then
      $fri_to_bool[i]=$fri_frm_bool[i]
    endif
  endfor

  wait for ($fri_frm_bool[1] == false)

until ($fri_frm_int[1] == 3)

;FOLD Ending
PTP CLAMP_AXES($AXIS_ACT)

wait sec 0.2

IF ($FriState==#CMD) THEN
 ret=fristop()
 WAIT FOR ($FriState==#MON)
ENDIF

$fri_to_int[1]=0
WAIT SEC 0.5
ret=friclose()

resetSTIFFNESS()
;move to Home-Position
PTP { a1 0,a2 90,e1 0, a3 0,a4 0,a5 0,a6 0}

END

DEFFCT BOOL isZeroStiffness(s:IN)
  DECL STIFFNESS s
  if( (s.axisstiffness.a1 == 0) AND (s.axisstiffness.a2 == 0) AND (s.axisstiffness.e1 == 0) AND (s.axisstiffness.a3 == 0) AND (s.axisstiffness.a4 == 0) AND (s.axisstiffness.a5 == 0) AND (s.axisstiffness.a6 == 0)) then
    return true
  endif
  return false
ENDFCT

DEFFCT E6AXIS TOUCH_AXIS(ax:IN)
 E6AXIS ax
 DECL E6AXIS an
 an = CLAMP_AXES(ax)
  if an.A6 <0 then
   an.A6 = an.A6 + 0.01
  else
   an.A6 = an.A6 - 0.01
  endif
 return an
ENDFCT

DEFFCT E6AXIS CLAMP_AXES(ax:IN)
 E6AXIS ax

 DECL E6AXIS an

 an.A1 = CLAMP(ax.A1, -169., 169.)
 an.A2 = CLAMP(ax.A2,  -29., 209.)

 an.E1 = CLAMP(ax.E1, -169., 169.)
 an.A3 = CLAMP(ax.A3, -119., 119.)
 an.A4 = CLAMP(ax.A4, -169., 169.)
 an.A5 = CLAMP(ax.A5, -119., 119.)
 an.A6 = CLAMP(ax.A6, -169., 169.)

 RETURN an
ENDFCT

DEFFCT REAL CLAMP(v:IN, minval:IN, maxval:IN)
 REAL v, minval, maxval
 DECL REAL r

 r = v

 IF v > maxval THEN
  r = maxval
 ENDIF

 IF v < minval THEN
  r = minval
 ENDIF

 RETURN r
ENDFCT
;ENDFOLD